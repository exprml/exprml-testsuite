{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExprML Schema",
  "description": "ExprML is a YAML-based expression evaluator framework.\nThis schema defines the structure of the ExprML language.\n",
  "$ref": "#/definitions/Expr",
  "definitions": {
    "Expr": {
      "description": "An expression is a JSON value that represents a computation.\nIt can be a scalar value, an object, an array, a function call, etc.\n",
      "anyOf": [
        {
          "$ref": "#/definitions/Eval"
        },
        {
          "$ref": "#/definitions/Scalar"
        },
        {
          "$ref": "#/definitions/Obj"
        },
        {
          "$ref": "#/definitions/Arr"
        },
        {
          "$ref": "#/definitions/Json"
        },
        {
          "$ref": "#/definitions/RangeIter"
        },
        {
          "$ref": "#/definitions/GetElem"
        },
        {
          "$ref": "#/definitions/FunCall"
        },
        {
          "$ref": "#/definitions/Cases"
        },
        {
          "$ref": "#/definitions/OpUnary"
        },
        {
          "$ref": "#/definitions/OpBinary"
        },
        {
          "$ref": "#/definitions/OpVariadic"
        }
      ]
    },
    "Eval": {
      "description": "`Eval` block is a JSON object that represents an expression to evaluate be accompanied by function definitions.\n",
      "examples": [
        {
          "eval": {
            "ref": "hello_function",
            "with": {
              "name": {
                "ref": "name_variable"
              }
            }
          },
          "where": [
            {
              "def": "name_variable",
              "value": "ExprML"
            },
            {
              "def": "hello_function",
              "with": [
                "name"
              ],
              "value": {
                "cat": [
                  "Hello, ",
                  {
                    "ref": "name"
                  },
                  "!"
                ]
              }
            }
          ]
        }
      ],
      "type": "object",
      "properties": {
        "where": {
          "description": "`where` property is a list of function definitions that can be referenced by the `eval` property.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FunDef"
          }
        },
        "eval": {
          "description": "`eval` property is a expression to evaluate, which can reference the functions in the `where` property.\n",
          "$ref": "#/definitions/Expr"
        }
      },
      "required": [
        "eval"
      ],
      "additionalProperties": false
    },
    "FunDef": {
      "description": "`FunDef` block is a function definition.\n`with` property may be absent to define a constant function, which can be regarded as a so-called variable definition.\n",
      "type": "object",
      "properties": {
        "def": {
          "description": "`def` property defines the name of the function.\n",
          "type": "string"
        },
        "value": {
          "description": "`value` property defines the body of the function.\n",
          "$ref": "#/definitions/Expr"
        },
        "with": {
          "description": "`with` property defines the list of parameter names, which may be absent.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "def",
        "value"
      ],
      "additionalProperties": false
    },
    "Scalar": {
      "description": "`Scalar` literal represents a scalar value which is a number, a boolean, or a string.\n",
      "examples": [
        42,
        true,
        "Hello, World!"
      ],
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "Obj": {
      "description": "`Obj` block constructs a JSON object.\n",
      "examples": [
        {
          "obj": {
            "key": "value"
          }
        }
      ],
      "type": "object",
      "properties": {
        "obj": {
          "description": "`obj` property takes a JSON object which maps string keys to expressions.\n",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Expr"
          }
        }
      },
      "required": [
        "obj"
      ],
      "additionalProperties": false
    },
    "Arr": {
      "description": "`Arr` block constructs a JSON array.\n",
      "examples": [
        {
          "arr": [
            1,
            2,
            3
          ]
        }
      ],
      "type": "object",
      "properties": {
        "arr": {
          "description": "`arr` property takes a JSON array which arranges expressions sequentially.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          }
        }
      },
      "required": [
        "arr"
      ],
      "additionalProperties": false
    },
    "Json": {
      "description": "`Json` block constructs a JSON value as is.\n",
      "examples": [
        {
          "json": {}
        },
        {
          "json": []
        },
        {
          "json": 42
        }
      ],
      "type": "object",
      "properties": {
        "json": {
          "description": "`json` property takes a JSON value excluding null.\n",
          "$ref": "#/definitions/Json/definitions/NonNull"
        }
      },
      "required": [
        "json"
      ],
      "additionalProperties": false,
      "definitions": {
        "NonNull": {
          "description": "`NonNull` represents a JOSN value excluding null.\n",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Json/definitions/NonNull"
              }
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Json/definitions/NonNull"
              }
            }
          ]
        }
      }
    },
    "RangeIter": {
      "description": "`RangeIter` block constructs a new collection by iterating over the given collection.\nA collection is a JSON value that is one of a string, an array, or an object.\nFor a string, the iteration is over its characters and constructs a JSON array.\nFor an array, the iteration is over its elements and constructs a JSON array.\nFor an object, the iteration is over its key-value pairs and constructs a JSON object.\n",
      "examples": [
        {
          "for": [
            "i",
            "c"
          ],
          "in": "Hello, World!",
          "do": {
            "ref": "i"
          },
          "if": {
            "neq": [
              {
                "ref": "c"
              },
              " "
            ]
          }
        },
        {
          "for": [
            "i",
            "e"
          ],
          "in": [
            1,
            2,
            3,
            4,
            5
          ],
          "do": {
            "mul": [
              {
                "ref": "e"
              },
              2
            ]
          },
          "if": {
            "gt": [
              {
                "ref": "i"
              },
              2
            ]
          }
        },
        {
          "for": [
            "k",
            "v"
          ],
          "in": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "do": {
            "mul": [
              {
                "ref": "e"
              },
              2
            ]
          },
          "if": {
            "neq": [
              {
                "ref": "k"
              },
              "b"
            ]
          }
        }
      ],
      "type": "object",
      "properties": {
        "for": {
          "description": "`for` property defines the names of two variables which can be referenced in `do` and `if` property.\nFor a string, the first variable references the index of a character in the string and the second variable references the character.\nFor an array, the first variable references the index of an element in the array and the second variable references the element.\nFor an object, the first variable references the key of a value in the object and the second variable references the value.\n",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 2,
          "maxItems": 2
        },
        "in": {
          "description": "`in` property takes a collection.\nIf the given value is evaluated as not a collection, the evaluation fails.\n",
          "$ref": "#/definitions/Expr"
        },
        "do": {
          "description": "`do` property defines the expression to evaluate at each iteration.\n",
          "$ref": "#/definitions/Expr"
        },
        "if": {
          "description": "`if` property determines whether to evaluate the `do` property.\nIf the given value is evaluated as not a boolean, the evaluation fails.\n`do` property is evaluated if this property is absent or it is true for the corresponding element.\nOtherwise, the `do` property is skipped. \n",
          "$ref": "#/definitions/Expr"
        }
      },
      "required": [
        "for",
        "in",
        "do"
      ],
      "additionalProperties": false
    },
    "GetElem": {
      "description": "`GetElem` block extracts an element at the specified position from a collection.\n",
      "examples": [
        {
          "get": 4,
          "from": "Hello, World!"
        },
        {
          "get": 1,
          "from": [
            1,
            2,
            3
          ]
        },
        {
          "get": "c",
          "from": {
            "a": 1,
            "b": 2,
            "c": 3
          }
        }
      ],
      "type": "object",
      "properties": {
        "get": {
          "description": "`get` property takes a position at a collection.\nFor a string, if the position is not an integer number index, the evaluation fails.\nFor an array, if the position is not an integer number index, the evaluation fails.\nFor an object, if the position is not a string key, the evaluation fails.\nIf the position is not found in the collection, the evaluation fails.\n",
          "$ref": "#/definitions/Expr"
        },
        "from": {
          "description": "`from` property takes a collection.\nIf the given value is evaluated as not a collection, the evaluation fails.\n",
          "$ref": "#/definitions/Expr"
        }
      },
      "required": [
        "get",
        "from"
      ],
      "additionalProperties": false
    },
    "FunCall": {
      "description": "`FunCall` block invokes a function with the specified arguments.\nCalling a function without arguments is allowed, which can be regarded as a so-called variable reference.\n",
      "examples": [
        {
          "ref": "hello_function",
          "with": {
            "name": {
              "ref": "name_variable"
            }
          }
        },
        {
          "ref": "name_variable"
        }
      ],
      "type": "object",
      "properties": {
        "ref": {
          "description": "`ref` property takes a name of the function to be called.\nIf the name is not found in the existing references, the evaluation fails.\n",
          "type": "string"
        },
        "with": {
          "description": "`with` property takes a JSON object which maps argument names to argument values.\nThis property may be absent if the function defines no arguments.\nIf arguments does not match the function definition, the evaluation fails.\n",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Expr"
          }
        }
      },
      "required": [
        "ref"
      ],
      "additionalProperties": false
    },
    "Cases": {
      "description": "`Cases` block selects one of the branches based on the conditions.\n",
      "examples": [
        {
          "cases": [
            {
              "when": {
                "gt": [
                  {
                    "ref": "x"
                  },
                  0
                ]
              },
              "then": "Positive"
            },
            {
              "when": {
                "lt": [
                  {
                    "ref": "x"
                  },
                  0
                ]
              },
              "then": "Negative"
            },
            {
              "otherwise": "Zero"
            }
          ]
        }
      ],
      "type": "object",
      "properties": {
        "cases": {
          "description": "`cases` property is a list of conditional cases.\nConditions are evaluated from the top, and the first case that has `when` property which evaluates `true` or has 'otherwise' property is selected.\nIf no case is selected, the evaluation fails.\n",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/Cases/definitions/CasesWhenThen"
              },
              {
                "$ref": "#/definitions/Cases/definitions/CasesOtherwise"
              }
            ]
          }
        }
      },
      "required": [
        "cases"
      ],
      "additionalProperties": false,
      "definitions": {
        "CasesWhenThen": {
          "description": "`CasesWhenThen` block is a conditional case consists of `when` and `then` properties.\n",
          "type": "object",
          "properties": {
            "when": {
              "description": "`when` property is a condition to evaluate.\nIf this expression evaluates to not a boolean value, the evaluation fails.\n",
              "$ref": "#/definitions/Expr"
            },
            "then": {
              "description": "`then` property is an expression to evaluate if this case is selected.\n",
              "$ref": "#/definitions/Expr"
            }
          },
          "required": [
            "when",
            "then"
          ],
          "additionalProperties": false
        },
        "CasesOtherwise": {
          "description": "`CasesOtherwise` block is a default case consists of `otherwise` property.\n",
          "type": "object",
          "properties": {
            "otherwise": {
              "description": "`otherwise` property is an expression to evaluate if this case is selected.\n",
              "$ref": "#/definitions/Expr"
            }
          },
          "required": [
            "otherwise"
          ],
          "additionalProperties": false
        }
      }
    },
    "OpUnary": {
      "description": "`OpUnary` block applies an builtin operation with one operand.\n",
      "type": "object",
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false,
      "properties": {
        "len": {
          "description": "`len` operation returns the length of the operand.\nFor a string, it returns the number of characters.\nFor an array, it returns the number of elements.\nFor an object, it returns the number of key-value pairs.\nIf the operand has no length, the evaluation fails.\n",
          "examples": [
            {
              "len": "Hello, World!"
            },
            {
              "len": [
                1,
                2,
                3
              ]
            },
            {
              "len": {
                "a": 1,
                "b": 2,
                "c": 3
              }
            }
          ],
          "$ref": "#/definitions/Expr"
        },
        "not": {
          "description": "`not` operation returns the negation of the operand.\nIf the operand evaluates to not a boolean value, the evaluation fails.\n",
          "examples": [
            {
              "not": true
            },
            {
              "not": false
            }
          ],
          "$ref": "#/definitions/Expr"
        },
        "flat": {
          "description": "`flat` operation returns the flattened JSON array of the operand.\nIf the operand is not evaluated as an array of arrays, the evaluation fails.\n",
          "examples": [
            {
              "flat": [
                [
                  1,
                  2
                ],
                [
                  3,
                  4
                ]
              ]
            }
          ],
          "$ref": "#/definitions/Expr"
        },
        "floor": {
          "description": "`floor` operation returns the maximum integer value that is less than or equal to the operand.\nIf the operand is not evaluated as a number, the evaluation fails.\nIf the result is to be not a finite number, the evaluation fails.\n",
          "examples": [
            {
              "floor": 3.14
            },
            {
              "floor": 3
            }
          ],
          "$ref": "#/definitions/Expr"
        },
        "ceil": {
          "description": "`ceil` operation returns the minimum integer value that is greater than or equal to the operand.\nIf the operand is not evaluated as a number, the evaluation fails.\nIf the result is to be not a finite number, the evaluation fails.\n",
          "examples": [
            {
              "ceil": 3.14
            },
            {
              "ceil": 3
            }
          ],
          "$ref": "#/definitions/Expr"
        },
        "abort": {
          "description": "`abort` operation always fails the evaluation.\nIf the operand evaluates to not a string, the evaluation fails.\n",
          "examples": [
            {
              "abort": "invalid state"
            }
          ],
          "$ref": "#/definitions/Expr"
        }
      }
    },
    "OpBinary": {
      "description": "`OpBinary` block applies an builtin operation with two operands.\n",
      "type": "object",
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false,
      "properties": {
        "sub": {
          "description": "`sub` operation returns the subtraction of the two operands.\nIf the operands are not evaluated as numbers, the evaluation fails.\nIf the result is to be not a finite number, the evaluation fails.\n",
          "examples": [
            {
              "sub": [
                3,
                2
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        },
        "div": {
          "description": "`div` operation returns the division of the two operands.\nIf the operands are not evaluated as numbers, the evaluation fails.\nIf the result is to be not a finite number, the evaluation fails.\n",
          "examples": [
            {
              "div": [
                3,
                2
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        },
        "eq": {
          "description": "`eq` operation returns the equality of the two operands.\n",
          "examples": [
            {
              "eq": [
                5,
                5
              ]
            },
            {
              "eq": [
                "Hello",
                "World"
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        },
        "neq": {
          "description": "`neq` operation returns the inequality of the two operands.\n",
          "examples": [
            {
              "neq": [
                5,
                5
              ]
            },
            {
              "neq": [
                "Hello",
                "World"
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        },
        "lt": {
          "description": "`lt` operation returns the less-than comparison of the two operands.\nIf the operands are not evaluated as comparable JSON values, the evaluation fails, where comparable JSON values are numbers, booleans, strings, or arrays of comparable values.\nIf the operands have different types, the evaluation fails.\n",
          "examples": [
            {
              "lt": [
                5,
                5
              ]
            },
            {
              "lt": [
                "xyz",
                "abc"
              ]
            },
            {
              "lt": [
                [
                  1,
                  2
                ],
                [
                  1,
                  2,
                  3
                ]
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        },
        "lte": {
          "description": "`lte` operation returns the less-than-or-equal comparison of the two operands.\nThis behaves like the `lt` operation, but it also returns `true` if the two operands are equal.\n",
          "examples": [
            {
              "lte": [
                5,
                5
              ]
            },
            {
              "lte": [
                "xyz",
                "abc"
              ]
            },
            {
              "lte": [
                [
                  1,
                  2
                ],
                [
                  1,
                  2,
                  3
                ]
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        },
        "gt": {
          "description": "`gt` operation returns the greater-than comparison of the two operands.\nThis behaves like the `lte` operation, but it returns negation of the `lte` operation.\n",
          "examples": [
            {
              "gt": [
                5,
                5
              ]
            },
            {
              "gt": [
                "xyz",
                "abc"
              ]
            },
            {
              "gt": [
                [
                  1,
                  2
                ],
                [
                  1,
                  2,
                  3
                ]
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        },
        "gte": {
          "description": "`gte` operation returns the greater-than-or-equal comparison of the two operands.\nThis behaves like the `lt` operation, but it returns negation of the `lt` operation.\n",
          "examples": [
            {
              "gte": [
                5,
                5
              ]
            },
            {
              "gte": [
                "xyz",
                "abc"
              ]
            },
            {
              "gte": [
                [
                  1,
                  2
                ],
                [
                  1,
                  2,
                  3
                ]
              ]
            }
          ],
          "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
        }
      },
      "definitions": {
        "OpBinaryOperand": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          },
          "minItems": 2,
          "maxItems": 2
        }
      }
    },
    "OpVariadic": {
      "description": "`OpVariadic` block applies an builtin operation with variadic operands.\n",
      "type": "object",
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false,
      "properties": {
        "add": {
          "description": "`add` operation returns the sum of the operands.\nIf operands are empty, the result is 0.\nIf the operands are not evaluated as numbers, the evaluation fails.\nIf the result is to be not a finite number, the evaluation fails.\n",
          "examples": [
            {
              "add": [
                1,
                2,
                3
              ]
            },
            {
              "add": []
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          }
        },
        "mul": {
          "description": "`mul` operation returns the product of the operands.\nIf operands are empty, the result is 1.\nIf the operands are not evaluated as numbers, the evaluation fails.\nIf the result is to be not a finite number, the evaluation fails.\n",
          "examples": [
            {
              "mul": [
                1,
                2,
                3
              ]
            },
            {
              "mul": []
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          }
        },
        "and": {
          "description": "`and` operation returns the logical AND of the operands.\nIf operands are empty, the result is true.\nIf the operands are not evaluated as booleans, the evaluation fails.\n",
          "examples": [
            {
              "and": []
            },
            {
              "and": [
                true
              ]
            },
            {
              "and": [
                false
              ]
            },
            {
              "and": [
                true,
                false
              ]
            },
            {
              "and": [
                true,
                true,
                true
              ]
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          }
        },
        "or": {
          "description": "`or` operation returns the logical OR of the operands.\nIf operands are empty, the result is false.\nIf the operands are not evaluated as booleans, the evaluation fails.\n",
          "examples": [
            {
              "or": []
            },
            {
              "or": [
                true
              ]
            },
            {
              "or": [
                false
              ]
            },
            {
              "or": [
                true,
                false
              ]
            },
            {
              "or": [
                false,
                false,
                false
              ]
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          }
        },
        "cat": {
          "description": "`cat` operation returns the concatenation of the operands.\nIf operands are empty, the result is an empty string.\nIf the operands are not evaluated as strings, the evaluation fails.\n",
          "examples": [
            {
              "cat": []
            },
            {
              "cat": [
                "Hello, ",
                "World",
                "!"
              ]
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          }
        },
        "min": {
          "description": "`min` operation returns the minimum value of the one or more operands.\nIf operands are not evaluated as numbers, the evaluation fails.\n",
          "examples": [
            {
              "min": [
                3,
                1,
                4,
                2
              ]
            },
            {
              "min": [
                100
              ]
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          },
          "minItems": 1
        },
        "max": {
          "description": "`max` operation returns the maximum value of the one or more operands.\nIf operands are not evaluated as numbers, the evaluation fails.\n",
          "examples": [
            {
              "max": [
                3,
                1,
                4,
                2
              ]
            },
            {
              "max": [
                100
              ]
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          },
          "minItems": 1
        },
        "merge": {
          "description": "`merge` operation returns the merged JSON object of the operands.\nIf operands are empty, the result is an empty object.\nIf the operands are not evaluated as JSON objects, the evaluation fails.\n",
          "examples": [
            {
              "merge": []
            },
            {
              "merge": [
                {
                  "a": 1,
                  "b": 1
                },
                {
                  "b": 2
                },
                {
                  "c": 3
                }
              ]
            },
            {
              "merge": [
                {
                  "a": 1
                },
                {
                  "a": 2
                },
                {}
              ]
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/Expr"
          }
        }
      }
    }
  }
}
